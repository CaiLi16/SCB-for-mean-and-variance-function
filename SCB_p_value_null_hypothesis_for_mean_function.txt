##########The following code is to calculate p_value for the null hypothesis: m(x)   =a0+a1*cos(w*x)+b1*sin(w*x)+a2*cos(2*w*x)+b2*sin(2*w*x)+a3*cos(3*w*x)+b3*sin(3*w*x)+a4*cos(4*w*x)+b4*sin(4*w*x)+a5*cos(5*w*x)+b5*sin(5*w*x)
#################choose spline knots#####################
BIC_f<-function(data)
{
x=data[,1]
n=length(x)
Na=floor(1*(n^(1/9)))
Nb=min(floor(5*n^(1/9)),floor(n/4-1))
N=Na
Nopt=Na
BIClist = 0
Nlist = 0
while (N<=Nb){
   y  =data[,2]
   B  =bs(x, df = NULL, knots =c(1:N)/(N+1), degree = 3, intercept = TRUE, Boundary.knots =c(0,1))
 temp1=solve(t(B)%*%B)
 temp2=t(B)%*%y
  beta=temp1%*%temp2
  yhat=B%*%beta
 temp3=yhat-y
  MSE =sum(temp3*temp3)/n
  qn =N+2
  BIC=log(MSE)+qn*log(n)/n
  BIClist = cbind(BIClist,BIC)
  Nlist = cbind(Nlist,N)
  N=N+1
  }
result = rbind(Nlist,BIClist)
return (result)
  }
##################design matrix###############
X_f<-function(n)
{
X<-matrix(1,nrow=n,ncol=5)
 for(j in 1:5)
 {
   X[,j]=(c(1:n)/n)^(j-1)
  }
return(X)
}
##########bandwidth##################################
h_f<-function(data)
{
    x<-data[,1]
    n<-length(x)
    y<-data[,2]
    X<-X_f(n=n)
temp1<-t(X)%*%X
temp2<-t(X)%*%y
X_inv<-solve(temp1)
a_hat<-X_inv%*%temp2
    e<-y-X%*%a_hat
  e_2<-sum(e*e)
temp3<-c(2*a_hat[3],6*a_hat[4],12*a_hat[5],0,0)
temp4<-X%*%temp3
temp5<-sum(temp4*temp4)
h_rot<-35*e_2/temp5
h_rot<-(h_rot/n)^0.2
return(h_rot)
}
###############kernel function##################
k_f<-function(u)
{
k<-15*(1-u^2)^2/16*((-1<=u)*(u<=1))
return(k)
}
############Nadaraya Waston estimates####################
m_hat_f<-function(data,xgrid,h)
{
x<-data[,1]
y<-data[,2]
n<-length(x)
m<-length(xgrid)
c<-rep(1,m)
c1<-x%*%t(c)
c0<-rep(1,n)
c2<-c0%*%t(xgrid)
M_x<-c1-c2
M_h<-M_x/h
kgrid<-k_f(u=M_h)/h
temp<-t(kgrid)%*%(c0)
temp2<-t(kgrid)%*%y
m_hat<-temp2/temp
m_hat<-cbind(xgrid,m_hat)
return(m_hat)
}
###############sigma estiamtes########################
###############splline estimate  + kernel #################
sigma_f<-function(data,xgrid,h_sigma_c)
{
x<-data[,1]
y<-data[,2]
result=BIC_f(data=data)
result = result[,(2:dim(result)[2])]
knot   =result[1,which.min(result[2,])]
B <-bs(x, knots =c(1:knot)/(knot+1), degree = 3, intercept = TRUE, Boundary.knots = c(0,1))
temp1<-solve(t(B)%*%B)
temp2<-t(B)%*%y
 beta<-temp1%*%temp2
yhat<-B%*%beta
 temp3=y-yhat
   z  <-temp3^2
  data1<-cbind(x,z)
  h_sig   <-h_f(data=data1)
  h_sig  <-h_sig/h_sigma_c
  sigma  <-m_hat_f(data=data1,xgrid=xgrid,h=h_sig)
  return(sigma)
}

###########################real data#########################################
setwd("D:/paper/SCBmeanfunctiondesign2015")
    library(splines)
    require(stats)
    require(graphics)
   data_y        <-read.csv("strata_pressure.csv",header=FALSE)
  data_y         <-data_y$V4
   data_y        <-as.matrix(data_y)
   n             <-length(data_y) 
   h_c           =log(n)^(0.5)
   h_sigma_c     =log(n)^(0.25)
   x             <-c(0:(n-1))/n
   x             <-as.matrix(x)
   data          <-cbind(x,data_y)
    x            <-data[,1]
    x            <-as.matrix(x)
    y            <-data[,2]
    n            =length(x)
    hrot         =h_f(data=data)    
    h_m          =hrot/h_c
    temp         <-(1-2*h_m)/400
    xgrid        <-as.matrix(h_m+c(1:400)*temp)
     temp1       =m_hat_f(data=data,xgrid=xgrid,h=h_m)
    mhat_xgrid  =as.matrix(temp1[,2])
     temp2      =sigma_f(data=data,xgrid=xgrid,h_sigma_c=h_sigma_c)
  sigmasq_hat   =as.matrix(temp2[,2])
        temp3   =-0.5*log(1-alpha)
     qalpha     =-log(temp3)
      temp4     =(n*h_m)^(-0.5)
      temp5     =sigmasq_hat^0.5
      v1        = temp4*temp5*sqrt(5/7) #####Ck
      temp6     =-2*log(h_m)
      ah        = temp6^0.5
      temp7     =0.5*log(0.75/(pi^2))
      temp8     = v1 *(ah+ah^(-1)*(qalpha+temp7))   
       lcl      =mhat_xgrid-temp8
       ucl      =mhat_xgrid+temp8
####################the following parameter is calculated in Matlab through cftool#############################################
##################### V6    5 #####################################
a0   =274.6
a1   =-11.8
b1   =-3.157
a2   =-3.866
b2   =3.169
a3   =8.025
b3   =6.153
a4   =6.713
b4   =-1.27
a5   =-5.03
b5   =2.706
w    =0.0144
x    = xgrid*409.6+295.5 
y    =a0+a1*cos(w*x)+b1*sin(w*x)+a2*cos(2*w*x)+b2*sin(2*w*x)+a3*cos(3*w*x)+b3*sin(3*w*x)+a4*cos(4*w*x)+b4*sin(4*w*x)+a5*cos(5*w*x)+b5*sin(5*w*x)
y1_new=as.matrix(y)
sup   =max(abs((y1_new-mhat_xgrid)/v1))
bh    =ah+ah^(-1)*temp7
tau   =ah*(sup-bh)
L     =exp(-2*exp(-tau))
p_value =1-L
p_value
#######################V4     5#############################
a0   =268.4
a1   =-12.36
b1   =-9.699
a2   =10.46
b2   =2.456
a3   =-14.05
b3   =-5.934
a4   =4.528
b4   =12.6
a5   =-2.742
b5   =-3.72
w    =0.01566
x    = xgrid*409.6+295.5
y    =a0+a1*cos(w*x)+b1*sin(w*x)+a2*cos(2*w*x)+b2*sin(2*w*x)+a3*cos(3*w*x)+b3*sin(3*w*x)+a4*cos(4*w*x)+b4*sin(4*w*x)+a5*cos(5*w*x)+b5*sin(5*w*x)
y1_new=as.matrix(y)
sup   =max(abs((y1_new-mhat_xgrid)/v1))
bh    =ah+ah^(-1)*temp7
tau   =ah*(sup-bh)
L     =exp(-2*exp(-tau))
p_value =1-L
p_value