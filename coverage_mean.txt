#############################the following code is to calculate our SCB coverage frequency for mean function over 2000 replications#####################
#################choose splie knots#####################
BIC_f<-function(data)
{
x=data[,1]
n=length(x)
Na=floor(1*(n^(1/9)))
Nb=min(floor(5*n^(1/9)),floor(n/4-1))
N=Na
Nopt=Na
BIClist = 0
Nlist = 0
while (N<=Nb){
   y  =data[,2]
   B  =bs(x, df = NULL, knots =c(1:N)/(N+1), degree = 3, intercept = TRUE, Boundary.knots =c(0,1))
 temp1=solve(t(B)%*%B)
 temp2=t(B)%*%y
  beta=temp1%*%temp2
  yhat=B%*%beta
 temp3=yhat-y
  MSE =sum(temp3*temp3)/n
  qn =N+2
  BIC=log(MSE)+qn*log(n)/n
  BIClist = cbind(BIClist,BIC)
  Nlist = cbind(Nlist,N)
  N=N+1
  }
result = rbind(Nlist,BIClist)
return (result)
  }
#######generate data##################################
data_f<-function(n)
{
x<-seq(1/n,1,by=1/n)
#temp=2*pi*(x-0.5)
m=as.matrix(cos(3*pi*x))
#m=as.matrix(exp(-32*x^2))
temp1<-as.matrix(exp(x)-0.9)
temp2<-as.matrix(exp(x)+0.9)
sig=as.matrix(temp1/temp2)
#sig <-0.1*sin(2*pi*x)+0.2
#norm<-as.matrix(rnorm(n))
#eps=sig*norm
t  <-sqrt(0.8)*rt(n,df=10)
eps  <-t*sig
y=m+eps
data=cbind(x,y)
return(data)
}
##################design matrix###############
X_f<-function(n)
{
X<-matrix(1,nrow=n,ncol=5)
 for(j in 1:5)
 {
   X[,j]=(c(1:n)/n)^(j-1)
  }
return(X)
}
##########bandwidth##################################
h_f<-function(data)
{
    x<-data[,1]
    n<-length(x)
    y<-data[,2]
    X<-X_f(n=n)
temp1<-t(X)%*%X
temp2<-t(X)%*%y
X_inv<-solve(temp1)
a_hat<-X_inv%*%temp2
    e<-y-X%*%a_hat
  e_2<-sum(e*e)
temp3<-c(2*a_hat[3],6*a_hat[4],12*a_hat[5],0,0)
temp4<-X%*%temp3
temp5<-sum(temp4*temp4)
h_rot<-35*e_2/temp5
h_rot<-(h_rot/n)^0.2
return(h_rot)
}
###############kernel function##################
k_f<-function(u)
{
k<-15*(1-u^2)^2/16*((-1<=u)*(u<=1))
return(k)
}
############Nadaraya Waston estimates####################
m_hat_f<-function(data,xgrid,h)
{
x<-data[,1]
y<-data[,2]
n<-length(x)
m<-length(xgrid)
c<-rep(1,m)
c1<-x%*%t(c)
c0<-rep(1,n)
c2<-c0%*%t(xgrid)
M_x<-c1-c2
M_h<-M_x/h
kgrid<-k_f(u=M_h)/h
temp<-t(kgrid)%*%(c0)
temp2<-t(kgrid)%*%y
m_hat<-temp2/temp
m_hat<-cbind(xgrid,m_hat)
return(m_hat)
}
###############sigma estiamtes########################
###############splline + kernel #################
sigma_f<-function(data,xgrid,h_sigma_c)
{
x<-data[,1]
y<-data[,2]
result=BIC_f(data=data)
result = result[,(2:dim(result)[2])]
knot   =result[1,which.min(result[2,])]
B <-bs(x, knots =c(1:knot)/(knot+1), degree = 3, intercept = TRUE, Boundary.knots = c(0,1))
temp1<-solve(t(B)%*%B)
temp2<-t(B)%*%y
 beta<-temp1%*%temp2
yhat<-B%*%beta
 temp3=y-yhat
   z  <-temp3^2
 #newz = z*(z<=quantile(z,0.95))+quantile(z,0.95)*(z>quantile(z,0.95))
  data1<-cbind(x,z)
  h_sig   <-h_f(data=data1)################need by (logn)^delta
  h_sig  <-h_sig/h_sigma_c
  sigma  <-m_hat_f(data=data1,xgrid=xgrid,h=h_sig)
  return(sigma)
}
##################SCB coverage for mean#################################
coverage_f<-function(n,c,sigma0,NSIM,alpha,h_c,h_sigma_c)
{
  
 frequency=0
   for (SIM in 1:NSIM)
    {  
    data    <-data_f(n=n)
    x       <-data[,1]
    n       =length(x)
    hrot    =h_f(data=data)    
    h_m     =hrot/h_c
    temp    <-(1-2*h_m)/400
    xgrid   <-as.matrix(h_m+c(1:400)*temp)
   mxgrid_ture=as.matrix(cos(3*pi*xgrid))
  #mxgrid_ture=as.matrix(exp(-32*xgrid^2))
    temp1=m_hat_f(data=data,xgrid=xgrid,h=h_m)
    mhat_xgrid=as.matrix(temp1[,2])
    temp2=sigma_f(data=data,xgrid=xgrid,h_sigma_c=h_sigma_c)
  sigmasq_hat=as.matrix(temp2[,2])
        temp3=-0.5*log(1-alpha)
   qalpha=-log(temp3)
      temp4=(n*h_m)^(-0.5)
      temp5=sigmasq_hat^0.5
      v1   = temp4*temp5*0.8451543
      temp6=-2*log(h_m)
      ah   = temp6^0.5
      temp7=0.5*log(0.75/(pi^2))
      temp8= v1 *(ah+ah^(-1)*(qalpha+temp7))
       lcl =mhat_xgrid-temp8
       ucl =mhat_xgrid+temp8
	 cover = sum((lcl<=mxgrid_ture)*(mxgrid_ture<=ucl))
       frequency = frequency + (cover == 400)   
     }
     coverage=frequency/NSIM
return(coverage )
}     


########################################
# Start the clock!
ptm <- proc.time()
library(splines)
require(stats)
require(graphics)
set.seed(10)
     
n=300
NSIM=2000
alpha=0.05
h_c=log(n)^(0.25)
h_sigma_c=log(n)^(0.25)
coverage<-coverage_f(n=n,c=c,sigma0=sigma0,NSIM=NSIM,alpha=alpha,h_c=h_c,h_sigma_c=h_sigma_c)
coverage
# Stop the clock
proc.time() - ptm